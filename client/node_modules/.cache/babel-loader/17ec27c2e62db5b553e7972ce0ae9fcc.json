{"ast":null,"code":"var _jsxFileName = \"D:\\\\Devlopment\\\\React\\\\mynotes\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport jwtDecode from \"jwt-decode\";\nimport React, { createContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(() => localStorage.getItem(\"authToken\") ? JSON.parse(localStorage.getItem(\"authToken\")) : null);\n  const [authToken, setAuthToken] = useState(localStorage.getItem(\"authToken\") ? jwtDecode(localStorage.getItem(\"authToken\")) : null);\n  const {\n    addToast\n  } = useToasts();\n  const history = useNavigate(); // login user\n\n  let loginUser = async e => {\n    e.preventDefault();\n    console.log(\"form submitted\");\n    let response = await fetch(\"/api/token/\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: e.target.email.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthToken(data);\n      setUser(jwtDecode(data.access));\n      log;\n      localStorage.setItem(\"authToken\", JSON.stringify(data));\n      addToast(`You are now logged in 👍`, {\n        appearance: \"success\",\n        autoDismiss: true\n      });\n      history(\"/\");\n    } else {\n      addToast(`Somthing went wrong`, {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n    }\n  }; // logout user\n\n\n  let logoutUser = () => {\n    setAuthToken(null);\n    setUser(null);\n    localStorage.removeItem(\"authToken\");\n    history('/login');\n  };\n\n  let contextData = {\n    user: user,\n    loginUser: loginUser,\n    logoutUser: logoutUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"Ky6DVzhpLYyhY/o2vLBkXHCulX8=\", false, function () {\n  return [useToasts, useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/Devlopment/React/mynotes/src/context/AuthContext.js"],"names":["jwtDecode","React","createContext","useState","useNavigate","useToasts","AuthContext","AuthProvider","children","user","setUser","localStorage","getItem","JSON","parse","authToken","setAuthToken","addToast","history","loginUser","e","preventDefault","console","log","response","fetch","method","headers","Accept","body","stringify","email","target","value","password","data","json","status","access","setItem","appearance","autoDismiss","logoutUser","removeItem","contextData"],"mappings":"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","sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport React, { createContext, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(() =>\r\n    localStorage.getItem(\"authToken\")\r\n      ? JSON.parse(localStorage.getItem(\"authToken\"))\r\n      : null\r\n  );\r\n  const [authToken, setAuthToken] = useState(\r\n    localStorage.getItem(\"authToken\")\r\n      ? jwtDecode(localStorage.getItem(\"authToken\"))\r\n      : null\r\n  );\r\n  const { addToast } = useToasts();\r\n  const history = useNavigate();\r\n\r\n  // login user\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"form submitted\");\r\n    let response = await fetch(\"/api/token/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: e.target.email.value,\r\n        password: e.target.password.value,\r\n      }),\r\n    });\r\n    let data = await response.json();\r\n    if (response.status === 200) {\r\n      setAuthToken(data);\r\n      setUser(jwtDecode(data.access));\r\n      log\r\n      localStorage.setItem(\"authToken\", JSON.stringify(data));\r\n\r\n      addToast(`You are now logged in 👍`, {\r\n        appearance: \"success\",\r\n        autoDismiss: true,\r\n      });\r\n      history(\"/\");\r\n    } else {\r\n      addToast(`Somthing went wrong`, {\r\n        appearance: \"error\",\r\n        autoDismiss: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // logout user\r\n\r\n  let logoutUser = () => {\r\n    setAuthToken(null)\r\n    setUser(null)\r\n    localStorage.removeItem(\"authToken\");\r\n    history('/login')\r\n  };\r\n\r\n  let contextData = {\r\n    user: user,\r\n    loginUser: loginUser,\r\n    logoutUser: logoutUser,\r\n  };\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}