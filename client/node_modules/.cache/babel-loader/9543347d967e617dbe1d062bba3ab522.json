{"ast":null,"code":"var _jsxFileName = \"D:\\\\Devlopment\\\\React\\\\mynotes\\\\src\\\\pages\\\\NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ReactComponent as ArrowLeft } from \"../assets/arrow-left.svg\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const history = useNavigate();\n  const [note, setNote] = useState([]);\n  const {\n    addToast\n  } = useToasts();\n  useEffect(() => {\n    getNote();\n  }, [id]);\n\n  const sendMessage = (msg, appearance) => {\n    addToast(msg, {\n      appearance: appearance\n    });\n  };\n\n  let getNote = async () => {\n    if (id === \"new\") return;\n    let response = await fetch(`/api/notes/${id}/`);\n    let data = await response.json();\n    setNote(data);\n  };\n\n  let createNote = async () => {\n    fetch(`/api/notes/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(note)\n    }).then(res => res.status).then(data => sendMessage());\n  };\n\n  let updateNote = async () => {\n    fetch(`/api/notes/${id}/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(note)\n    });\n  };\n\n  let deleteNote = async () => {\n    fetch(`/api/notes/${id}/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      } // body: JSON.stringify(note),\n\n    });\n    history('/');\n  };\n\n  let handleSubmit = () => {\n    if (id !== \"new\" && note.body === \"\") {\n      deleteNote();\n    } else if (id !== \"new\") {\n      updateNote();\n    } else if (id === \"new\" && note !== null) {\n      createNote();\n    }\n\n    history(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n          onClick: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), id !== \"new\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote({ ...note,\n          body: e.target.value\n        });\n      },\n      value: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotePage, \"OMzvlmCV/fvujC58Mg1mdiu33Qw=\", false, function () {\n  return [useParams, useNavigate, useToasts];\n});\n\n_c = NotePage;\nexport default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"sources":["D:/Devlopment/React/mynotes/src/pages/NotePage.js"],"names":["React","useEffect","useState","useParams","ReactComponent","ArrowLeft","useNavigate","useToasts","NotePage","id","history","note","setNote","addToast","getNote","sendMessage","msg","appearance","response","fetch","data","json","createNote","method","headers","body","JSON","stringify","then","res","status","updateNote","deleteNote","handleSubmit","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ReactComponent as ArrowLeft } from \"../assets/arrow-left.svg\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {  useToasts } from \"react-toast-notifications\";\r\n\r\nconst NotePage = () => {\r\n  const { id } = useParams();\r\n  const history = useNavigate();\r\n  const [note, setNote] = useState([]);\r\n  const { addToast } = useToasts();\r\n\r\n  useEffect(() => {\r\n    getNote();\r\n  }, [id]);\r\n\r\n  const sendMessage = (msg,appearance)=>{\r\n    addToast(msg,{appearance:appearance})\r\n  }\r\n\r\n  let getNote = async () => {\r\n    if (id === \"new\") return;\r\n\r\n    let response = await fetch(`/api/notes/${id}/`);\r\n    let data = await response.json();\r\n    setNote(data);\r\n  };\r\n\r\n  let createNote = async () => {\r\n    fetch(`/api/notes/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(note),\r\n    })\r\n    .then(res => res.status)\r\n    .then(data=> sendMessage())\r\n  };\r\n\r\n  let updateNote = async () => {\r\n    fetch(`/api/notes/${id}/`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(note),\r\n    });\r\n  };\r\n  let deleteNote = async () => {\r\n    fetch(`/api/notes/${id}/`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      // body: JSON.stringify(note),\r\n    });\r\n    history('/');\r\n    \r\n  };\r\n\r\n  let handleSubmit = () => {\r\n    if (id !== \"new\" && note.body === \"\") {\r\n      deleteNote();\r\n    } else if (id !== \"new\") {\r\n      updateNote();\r\n    } else if (id === \"new\" && note !== null) {\r\n      createNote();\r\n    }\r\n\r\n    history(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      <div className=\"note-header\">\r\n        <h3>\r\n          <ArrowLeft onClick={handleSubmit} />\r\n        </h3>\r\n        {id !== \"new\" ? (\r\n          <button onClick={deleteNote}>Delete</button>\r\n        ) : (\r\n          <button onClick={handleSubmit}>Done</button>\r\n        )}\r\n      </div>\r\n      <textarea\r\n        onChange={(e) => {\r\n          setNote({ ...note, body: e.target.value });\r\n        }}\r\n        value={note?.body}\r\n      ></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotePage;\r\n"]},"metadata":{},"sourceType":"module"}