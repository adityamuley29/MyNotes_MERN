{"ast":null,"code":"var _jsxFileName = \"D:\\\\Devlopment\\\\Web Devlopment\\\\MERN Projects\\\\My Notes\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nconst CURRENT_USER = {\n  id: null,\n  username: null,\n  email: null\n};\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(() => localStorage.getItem(\"userId\") ? localStorage.getItem(\"userId\") : null);\n  const [authToken, setAuthToken] = useState(localStorage.getItem(\"userId\") ? localStorage.getItem(\"userId\") : null);\n  const [userDetails, setUserDetails] = useState(CURRENT_USER);\n  const {\n    addToast\n  } = useToasts();\n  const history = useNavigate(); // register user\n\n  const registerUserHandeler = async e => {\n    e.preventDefault();\n    const response = await fetch(\"/auth/register\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: e.target.email.value,\n        username: e.target.name.value,\n        password: e.target.password.value,\n        confirmPassword: e.target.password.value\n      })\n    });\n\n    if (response.status === 200) {\n      addToast(`Registration Successfull 🥳`, {\n        appearance: \"success\",\n        autoDismiss: true\n      });\n      history(\"/\");\n    } else {\n      addToast(`Somthing went wrong! 😬`, {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n    }\n\n    console.log(\"form submited\");\n  }; // login user\n\n\n  let loginUser = async e => {\n    e.preventDefault();\n    console.log(\"form submitted\");\n    let response = await fetch(\"/auth/login\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: e.target.email.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json();\n    let user = data.user;\n\n    if (response.status === 200) {\n      setAuthToken(user.id);\n      setUser(user);\n      setUserDetails({\n        id: user.id,\n        username: user.username,\n        email: user.email\n      });\n      localStorage.setItem(\"userId\", JSON.stringify(user.id));\n      addToast(`You are now logged in 👍`, {\n        appearance: \"success\",\n        autoDismiss: true\n      });\n      history(\"/\");\n    } else {\n      addToast(`Somthing went wrong`, {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n    }\n  };\n\n  console.log(user);\n  console.log(userDetails); // logout user\n\n  let logoutUser = () => {\n    setAuthToken(null);\n    setUser(null);\n    localStorage.removeItem(\"userId\");\n    history(\"/login\");\n  };\n\n  let contextData = {\n    user: user,\n    registerUserHandeler: registerUserHandeler,\n    loginUser: loginUser,\n    logoutUser: logoutUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"FxU/S1XITCWsAYEibuxB4DCyZNc=\", false, function () {\n  return [useToasts, useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/Devlopment/Web Devlopment/MERN Projects/My Notes/client/src/context/AuthContext.js"],"names":["React","createContext","useState","useNavigate","useToasts","AuthContext","CURRENT_USER","id","username","email","AuthProvider","children","user","setUser","localStorage","getItem","authToken","setAuthToken","userDetails","setUserDetails","addToast","history","registerUserHandeler","e","preventDefault","response","fetch","method","headers","Accept","body","JSON","stringify","target","value","name","password","confirmPassword","status","appearance","autoDismiss","console","log","loginUser","data","json","setItem","logoutUser","removeItem","contextData"],"mappings":"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","sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nconst CURRENT_USER = {\r\n  id: null,\r\n  username: null,\r\n  email: null,\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(() =>\r\n    localStorage.getItem(\"userId\") ? localStorage.getItem(\"userId\") : null\r\n  );\r\n  const [authToken, setAuthToken] = useState(\r\n    localStorage.getItem(\"userId\") ? localStorage.getItem(\"userId\") : null\r\n  );\r\n  const [userDetails, setUserDetails] = useState(CURRENT_USER);\r\n  const { addToast } = useToasts();\r\n  const history = useNavigate();\r\n\r\n  // register user\r\n\r\n  const registerUserHandeler = async (e) => {\r\n    e.preventDefault();\r\n    const response = await fetch(\"/auth/register\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: e.target.email.value,\r\n        username: e.target.name.value,\r\n        password: e.target.password.value,\r\n        confirmPassword: e.target.password.value,\r\n      }),\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      addToast(`Registration Successfull 🥳`, {\r\n        appearance: \"success\",\r\n        autoDismiss: true,\r\n      });\r\n      history(\"/\");\r\n    } else {\r\n      addToast(`Somthing went wrong! 😬`, {\r\n        appearance: \"error\",\r\n        autoDismiss: true,\r\n      });\r\n    }\r\n    console.log(\"form submited\");\r\n  };\r\n\r\n  // login user\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"form submitted\");\r\n    let response = await fetch(\"/auth/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: e.target.email.value,\r\n        password: e.target.password.value,\r\n      }),\r\n    });\r\n    let data = await response.json();\r\n    let user = data.user;\r\n    if (response.status === 200) {\r\n      setAuthToken(user.id);\r\n      setUser(user);\r\n      setUserDetails({\r\n        id: user.id,\r\n        username: user.username,\r\n        email: user.email,\r\n      });\r\n\r\n      localStorage.setItem(\"userId\", JSON.stringify(user.id));\r\n\r\n      addToast(`You are now logged in 👍`, {\r\n        appearance: \"success\",\r\n        autoDismiss: true,\r\n      });\r\n      history(\"/\");\r\n    } else {\r\n      addToast(`Somthing went wrong`, {\r\n        appearance: \"error\",\r\n        autoDismiss: true,\r\n      });\r\n    }\r\n  };\r\n  console.log(user);\r\n  console.log(userDetails);\r\n  // logout user\r\n\r\n  let logoutUser = () => {\r\n    setAuthToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem(\"userId\");\r\n    history(\"/login\");\r\n  };\r\n\r\n  let contextData = {\r\n    user: user,\r\n    registerUserHandeler: registerUserHandeler,\r\n    loginUser: loginUser,\r\n    logoutUser: logoutUser,\r\n  };\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}