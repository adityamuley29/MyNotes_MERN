{"ast":null,"code":"var _jsxFileName = \"D:\\\\Devlopment\\\\React\\\\mynotes\\\\src\\\\pages\\\\NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ReactComponent as ArrowLeft } from \"../assets/arrow-left.svg\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const history = useNavigate();\n  const [note, setNote] = useState([]);\n  useEffect(() => {\n    getNote();\n  }, [id]);\n\n  let getNote = async () => {\n    if (id === 'new') return;\n    let response = await fetch(`/api/notes/${id}/`);\n    let data = await response.json();\n    setNote(data);\n  };\n\n  let createNote = async () => {\n    fetch(`/api/notes/create/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(note)\n    });\n  };\n\n  let updateNote = async () => {\n    fetch(`/api/notes/${id}/update/`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(note)\n    });\n  };\n\n  let deleteNote = async () => {\n    fetch(`/api/notes/${id}/delete/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      } // body: JSON.stringify(note),\n\n    });\n    history(\"/\");\n  };\n\n  let handleSubmit = () => {\n    if (id !== 'new' && note.body == null) {\n      deleteNote();\n    } else if (id !== 'new') {\n      updateNote();\n    } else if (id === 'new' && note !== null) {\n      createNote();\n    }\n\n    history(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n          onClick: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), id !== \"new\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote({ ...note,\n          body: e.target.value\n        });\n      },\n      value: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotePage, \"RGGZ1di3001THIIbwrhSFFFDJhc=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = NotePage;\nexport default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"sources":["D:/Devlopment/React/mynotes/src/pages/NotePage.js"],"names":["React","useEffect","useState","useParams","ReactComponent","ArrowLeft","useNavigate","NotePage","id","history","note","setNote","getNote","response","fetch","data","json","createNote","method","headers","body","JSON","stringify","updateNote","deleteNote","handleSubmit","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ReactComponent as ArrowLeft } from \"../assets/arrow-left.svg\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst NotePage = () => {\r\n  const { id } = useParams();\r\n  const history = useNavigate();\r\n  const [note, setNote] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getNote();\r\n  }, [id]);\r\n\r\n  let getNote = async () => {\r\n    if(id === 'new') return\r\n\r\n    let response = await fetch(`/api/notes/${id}/`);\r\n    let data = await response.json();\r\n    setNote(data);\r\n  };\r\n\r\n  let createNote = async () => {\r\n    fetch(`/api/notes/create/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(note),\r\n    });\r\n  };\r\n\r\n  let updateNote = async () => {\r\n    fetch(`/api/notes/${id}/update/`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(note),\r\n    });\r\n  };\r\n  let deleteNote = async () => {\r\n    fetch(`/api/notes/${id}/delete/`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      // body: JSON.stringify(note),\r\n    });\r\n    history(\"/\");\r\n  };\r\n\r\n  let handleSubmit = () => {\r\n    if(id !== 'new' && note.body == null){\r\n      deleteNote()\r\n    }else if(id !== 'new'){\r\n      updateNote()\r\n    }else if(id === 'new' && note !== null){\r\n      createNote()\r\n    }\r\n\r\n    \r\n    history(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      <div className=\"note-header\">\r\n        <h3>\r\n          <ArrowLeft onClick={handleSubmit} />\r\n        </h3>\r\n        {id !== \"new\" ? (\r\n          <button onClick={deleteNote}>Delete</button>\r\n        ) : (\r\n          <button onClick={handleSubmit}>Done</button>\r\n        )}\r\n      </div>\r\n      <textarea\r\n        onChange={(e) => {\r\n          setNote({ ...note, body: e.target.value });\r\n        }}\r\n        value={note?.body}\r\n      ></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotePage;\r\n"]},"metadata":{},"sourceType":"module"}